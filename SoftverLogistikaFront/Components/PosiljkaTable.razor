@using DeljeniPodaci;
@using SoftverLogistikaFront.Services;
@inject AuthService AuthService;
@inject NavigationManager NavigationManager;

<table class="table table-hover table-bordered shadow-sm">
    <thead class="table-dark1">
        <tr>
            <th>Id</th>
            <th>Naziv</th>
            <th>Status</th>
            <th>Datum Kreiranja</th>
            <th>Datum Isporuke</th>
            <th>Akcije</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var posiljka in Posiljke)
        {
            <tr>
                <td>@(posiljka.Id.ToString().Substring(0, 6))</td>
                <td>@posiljka.Naziv</td>
                <td>@Posiljka.VratiStatusKaoTekst((int)(posiljka.Status))</td>
                <td>@posiljka.DatumKreiranja.ToShortDateString()</td>
                <td>@(posiljka.DatumIsporuke.HasValue ? posiljka.DatumIsporuke.Value.ToShortDateString() : "-")</td>
                <td>
                    @if (AuthService.IsLoggedIn) // korisnik je ulogovan
                    {
                        <button class="btn btn-sm btn-primary me-2" @onclick="() => EditPosiljka(posiljka.Id)">Izmeni</button>
                        <button class="btn btn-sm btn-danger me-2" @onclick="() => DeletePosiljka(posiljka.Id)">Obriši</button>
                        <button class="btn btn-sm btn-info" @onclick="() => PrikaziDetalje(posiljka.Id)">Detalji</button>
                    }
                    else //korisnik nije ulogovan
                    {
                        <span class="text-muted">Ulogujte se da bi videli akcije.</span>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter] public List<Posiljka> Posiljke { get; set; } = new();
    [Parameter] public EventCallback<Guid> OnEdit { get; set; }
    [Parameter] public EventCallback<Guid> OnDelete { get; set; }

    private async Task EditPosiljka(Guid id)
    {
        await OnEdit.InvokeAsync(id);
    }

    private async Task DeletePosiljka(Guid id)
    {
        await OnDelete.InvokeAsync(id);
    }

    private void PrikaziDetalje(Guid id)
    {
        NavigationManager.NavigateTo($"/detaljiposiljkeid={id}");
    }

    protected override async Task OnInitializedAsync()
    {
        // Proverava status prijave prilikom inicijalizacije
        await AuthService.CheckLoginStatusAsync();
        AuthService.OnChange += StateHasChanged;
    }
}
