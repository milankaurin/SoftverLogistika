@page "/"

@using SoftverLogistikaFront.Services
@using SoftverLogistikaFront.Components
@using DeljeniPodaci;
@inject NavigationManager NavigationManager
@inject PosiljkaService PosiljkaService
@inject AuthService AuthService

<PageTitle>Početna stranica</PageTitle>

<div class="container mt-4">
    <!-- Naslovna poruka sa stilizacijom -->
    <div class="mb-5">
        <h1 class="display-4" style="color: white;">Zdravo!</h1>
        <p class="lead" style="color: white;">
            Dobrodošli u <strong>Sistem za praćenje pošiljki u logistici</strong> koji predstavlja projektni zadatak u okviru konkursa za .NET Developera praktikanta.
            Nadam se da će vam se aplikacija svideti. Pozdrav, Milan!
        </p>
    </div>

    <div class="mb-4">
        <div class="row">
            <!-- Polje za pretragu naziva -->
            <div class="col-md-6">
                <label for="search" class="form-label" style="color: white;">Pretraga po nazivu</label>
                <input id="search" type="text" class="form-control" @bind="TekstPretraga" @bind:event="oninput" />
            </div>

            <!-- Checkboxovi za filtriranje po statusu -->
            <div class="col-md-6">
                <label class="form-label" style="color: white;">Filtriraj po statusu</label>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="status1" @bind="FilterNaPutu" />
                    <label class="form-check-label" for="status1" style="color: white;">Na putu</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="status2" @bind="FilterUSkladistu" />
                    <label class="form-check-label" for="status2" style="color: white;">U skladištu</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="status3" @bind="FilterIsporuceno" />
                    <label class="form-check-label" for="status3" style="color: white;">Isporučeno</label>
                </div>
            </div>
        </div>
    </div>

    <!-- Lista pošiljki -->
    <div>
        <h3 class="mb-3" style="color: white;">Lista pošiljki</h3>

        @if (posiljke == null)
        {
            <div class="alert alert-info" role="alert">
                <p style="color: white;">Učitavanje...</p>
            </div>
        }
        else
        {
            <!-- Pozivanje komponente PosiljkaTable -->
            <PosiljkaTable Posiljke="filteredPosiljke" OnEdit="EditPosiljka" OnDelete="Delete" />
        }
    </div>
</div>

@code {
    private List<Posiljka>? posiljke;

    private string tekstPretraga = string.Empty;
    private bool filterNaPutu = true;
    private bool filterUSkladistu = true;
    private bool filterIsporuceno = true;

    private List<Posiljka>? filteredPosiljke;

    protected override async Task OnInitializedAsync()
    {
        // Proveri status prijave
        await AuthService.CheckLoginStatusAsync();
        AuthService.OnChange += StateHasChanged;

        // Učitaj sve pošiljke
        posiljke = await PosiljkaService.GetAllAsync();
        filteredPosiljke = posiljke;
    }

    private void PretragaIFiltriranje()
    {
        if (posiljke == null) return;

        filteredPosiljke = posiljke.Where(p =>
            (string.IsNullOrEmpty(tekstPretraga) || p.Naziv.Contains(tekstPretraga, StringComparison.OrdinalIgnoreCase)) &&
            ((filterNaPutu && p.Status == StatusPosiljke.NaPutu) ||
             (filterUSkladistu && p.Status == StatusPosiljke.USkladistu) ||
             (filterIsporuceno && p.Status == StatusPosiljke.Isporuceno))
        ).ToList();
    }

    private string TekstPretraga
    {
        get => tekstPretraga;
        set
        {
            tekstPretraga = value;
            PretragaIFiltriranje();
        }
    }

    private bool FilterNaPutu
    {
        get => filterNaPutu;
        set
        {
            filterNaPutu = value;
            PretragaIFiltriranje();
        }
    }

    private bool FilterUSkladistu
    {
        get => filterUSkladistu;
        set
        {
            filterUSkladistu = value;
            PretragaIFiltriranje();
        }
    }

    private bool FilterIsporuceno
    {
        get => filterIsporuceno;
        set
        {
            filterIsporuceno = value;
            PretragaIFiltriranje();
        }
    }

    private void EditPosiljka(Guid id)
    {
        NavigationManager.NavigateTo($"/izmenaposiljkeid={id}");
    }

    private async Task Delete(Guid id)
    {
        var success = await PosiljkaService.DeleteAsync(id);
        if (success)
        {
            posiljke = await PosiljkaService.GetAllAsync();
            filteredPosiljke = posiljke.Where(p =>
                (string.IsNullOrEmpty(tekstPretraga) || p.Naziv.Contains(tekstPretraga, StringComparison.OrdinalIgnoreCase)) &&
                ((filterNaPutu && p.Status == StatusPosiljke.NaPutu) ||
                 (filterUSkladistu && p.Status == StatusPosiljke.USkladistu) ||
                 (filterIsporuceno && p.Status == StatusPosiljke.Isporuceno))
            ).ToList();
        }
    }
}
