@page "/izmenaposiljkeid={id:guid}"
@using DeljeniPodaci
@using SoftverLogistikaFront.Services
@inject NavigationManager NavigationManager
@using SoftverLogistikaFront.Layout
@using SoftverLogistikaFront.Components
@using System.Text
@inject PosiljkaService PosiljkaService


<PageTitle>Izmena Pošiljke</PageTitle>

<h3 style="color: white;">Izmena Pošiljke</h3>

@if (loading)
{
    <p>Učitavanje...</p>
}
else if (selectedPosiljka == null)
{
    <p class="text-danger">Pošiljka nije pronađena!</p>
}

else
{
    <!-- Koristimo shared komponentu PosiljkaForm -->
    <PosiljkaForma PosiljkaModel="selectedPosiljka" OnSave="HandleValidSubmit" OnCancelCallback="HandleCancel" />

    @if (successMessage != null)
    {
        <div class="alert alert-success mt-3">@successMessage</div>
    }

}


@code {
    [Parameter] public Guid id { get; set; }

    private Posiljka? selectedPosiljka;
    private bool loading = true;
    private string? successMessage;
    private int StatusValue
    {
        get => (int)(selectedPosiljka?.Status ?? 0);
        set
        {
            if (selectedPosiljka != null)
            {
                selectedPosiljka.Status = (StatusPosiljke)value;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            selectedPosiljka = await PosiljkaService.GetByIdAsync(id);
        }
        catch
        {
            selectedPosiljka = null;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (selectedPosiljka != null)
        {

            StringBuilder errorMessageBuilder = new StringBuilder();

            // Validacija naziva
            if (selectedPosiljka.Naziv.Length < 3)
            {
                errorMessageBuilder.AppendLine("Naziv mora imati najmanje 3 karaktera.");
            }

            if (selectedPosiljka.Posiljalac.Length < 3)
            {
                errorMessageBuilder.AppendLine("Naziv pošiljaoca mora imati najmanje 3 karaktera.");
            }

            if (selectedPosiljka.Primalac.Length < 3)
            {
                errorMessageBuilder.AppendLine("Naziv primaoca mora imati najmanje 3 karaktera.");
            }

            // Validacija datuma isporuke u zavisnosti od statusa pošiljke
            if (selectedPosiljka.Status == StatusPosiljke.Isporuceno)
            {
                if (!selectedPosiljka.DatumIsporuke.HasValue)
                {
                    errorMessageBuilder.AppendLine("Datum isporuke je obavezan za pošiljke koje su isporučene.");
                }
                if (selectedPosiljka.DatumIsporuke > DateTime.Now)
                {
                    errorMessageBuilder.AppendLine("Datum isporuke za isporučene pošiljke ne može biti u budućnosti.");
                }
                if (selectedPosiljka.DatumIsporuke < selectedPosiljka.DatumKreiranja)
                {
                    errorMessageBuilder.AppendLine("Datum isporuke mora biti nakon datuma kreiranja.");
                }
            }
            else if (selectedPosiljka.Status == StatusPosiljke.NaPutu || selectedPosiljka.Status == StatusPosiljke.USkladistu)
            {
                if (selectedPosiljka.DatumIsporuke.HasValue && selectedPosiljka.DatumIsporuke <= DateTime.Now)
                {
                    errorMessageBuilder.AppendLine("Datum isporuke za pošiljke koje su na putu ili u skladištu mora biti u budućnosti.");
                }
            }

            // Provera da li ima grešaka
            if (errorMessageBuilder.Length > 0)
            {
                successMessage = errorMessageBuilder.ToString();
                StateHasChanged();
                return;
            }


            var success = await PosiljkaService.UpdateAsync(selectedPosiljka.Id, selectedPosiljka);
            if (success)
            {
                successMessage = "Pošiljka uspešno ažurirana! Preusmeravamo vas na glavnu stranu...";

                // Osveži komponentu da bi se prikazala poruka
                StateHasChanged();

                // Sačekaj 2 sekunde pre preusmeravanja
                await Task.Delay(2500);

                // Preusmeravanje na početnu stranicu
                NavigationManager.NavigateTo("/");
            }
            else
            {
                successMessage = "Došlo je do greške prilikom ažuriranja pošiljke.";
                StateHasChanged(); // Osveži prikaz za grešku
            }
        }
    }

    private void HandleCancel()
    {
        NavigationManager.NavigateTo("/");
    }


  

   
}
